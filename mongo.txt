// 0. Create a collection named orders.
db.createCollection('orders')

// 1. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02

db.orders.insert( {orderDate: new Date("2017-02-03"), orderTotal: 30, lineItems: [ {unitPrice: 12, quantity: 20, productName: 'Oranges' } ] } )
db.orders.insert( {orderDate: new Date("2017-04-04"), orderTotal: 45, lineItems: [ {unitPrice: 15, quantity: 54, productName: 'Apples'} ] } )
db.orders.insert( {orderDate: new Date("2017-01-02"), orderTotal: 50, lineItems: [ {unitPrice: 10, quantity: 5, productName: 'Pears'} ] } )



// 2. Find all orders and make them look pretty.

 db.orders.find().pretty()



// 3. Find all orders with an orderDate that is after 1/31/2017.

db.orders.find( {orderDate: {$gt: new Date("2017-01-31") } } )



// 4. Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)

db.orders.update( {orderDate: new Date("2017-02-03")}, {$set: {orderTotal: 63} } )



// 5. Add another lineItem to the order from 4/4/2017

db.orders.update( {orderDate: new Date("2017-04-04")}, {$push: {unitPrice: 200, quantity: 3, productName: "Mango"}})



// 6. Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's

db.orders.update( {orderDate: new Date("2017-01-02")}, {$set: {"lineItems.0.productName": "transistor radio"} } )
db.orders.update( {orderDate: new Date("2017-01-02")}, {$set: {"lineItems.0.quantity": "2"} } )



// 7. Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $elemMatch

db.orders.find( {lineItems: { $elemMatch: {quantity: {$lt: 10, $gt: 2 } } } } )